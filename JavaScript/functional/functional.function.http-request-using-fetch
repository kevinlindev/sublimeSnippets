<snippet>
  <content><![CDATA[
/**
 * Parses the JSON returned by a network request
 *
 * @param  {object} response A response from a network request
 *
 * @return {object}          The parsed JSON from the request
 */
function parseJSON(response) {
  if (response.status === 204 || response.status === 205) {
    return null;
  }
  return response.json();
}

/**
 * Checks if a network request came back fine, and throws an error if not
 *
 * @param  {object} response   A response from a network request
 *
 * @return {object|undefined} Returns either the response, or throws an error
 */
function checkStatus(response) {
  if (response.ok) {
    return response;
  }
  return response.text().then(content => {
    const error = new Error(response.statusText);
    error.status = response.status;
    try {
      error.content = JSON.parse(content);
    } catch {
      error.content = {};
    }
    throw error;
  });
}

/**
 * Requests a URL, returning a promise
 *
 * @param  {string} url       The URL we want to request
 * @param  {object} [options] The options we want to pass to "fetch"
 *
 * @return {object}           The response data
 */
export default function request(url, options) {
  return fetch(url, options)
    .then(checkStatus)
    .then(parseJSON);
}

--- Unit Tests
/**
 * Test the request function
 */

import 'whatwg-fetch';
import request from '../request';

describe('request', () => {
  // Before each test, stub the fetch function
  beforeEach(() => {
    window.fetch = jest.fn();
  });

  describe('stubbing successful response', () => {
    // Before each test, pretend we got a successful response
    beforeEach(() => {
      const res = new Response('{"hello":"world"}', {
        status: 200,
        headers: {
          'Content-type': 'application/json',
        },
      });

      window.fetch.mockReturnValue(Promise.resolve(res));
    });

    it('should format the response correctly', done => {
      request('/thisurliscorrect')
        .catch(done)
        .then(json => {
          expect(json.hello).toBe('world');
          done();
        });
    });
  });

  describe('stubbing 204 response', () => {
    // Before each test, pretend we got a successful response
    beforeEach(() => {
      const res = new Response('', {
        status: 204,
        statusText: 'No Content',
      });

      window.fetch.mockReturnValue(Promise.resolve(res));
    });

    it('should return null on 204 response', done => {
      request('/thisurliscorrect')
        .catch(done)
        .then(json => {
          expect(json).toBeNull();
          done();
        });
    });
  });

  describe('stubbing error response', () => {
    it('should catch errors when body is null', done => {
      const response = {
        status: 404,
        statusText: 'Not Found',
        headers: {
          'Content-type': 'application/json',
        },
      };
      const res = new Response({}, response);
      window.fetch.mockReturnValue(Promise.resolve(res));

      request('/thisdoesntexist').catch(err => {
        expect(err.status).toBe(404);
        expect(err.message).toBe('Not Found');
        done();
      });
    });

    it('should catch errors when body is not null', done => {
      const body = '{ "errorKey": "NOT_FOUND" }';
      const response = {
        status: 404,
        statusText: 'Not Found',
        headers: {
          'Content-type': 'application/json',
        },
      };
      const res = new Response(body, response);

      window.fetch.mockReturnValue(Promise.resolve(res));

      request('/thisdoesntexist').catch(err => {
        expect(err.status).toBe(404);
        expect(err.message).toBe('Not Found');
        expect(err.content).toEqual({ errorKey: 'NOT_FOUND' });
        done();
      });
    });
  });
});
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>functional.function.http-request-using-fetch</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.js, text.plain</scope>
</snippet>
