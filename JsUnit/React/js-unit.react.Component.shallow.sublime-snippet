<snippet>
  <content><![CDATA[
import React from 'react';
import { shallow } from 'enzyme';
import { AnotherComponent } from 'some-where-else';
import ${1} from '../${1}';

const defaultProps = {
  someString: '',
  someArray: [],
  someObj: {},
  someHandler: jest.fn(),
};

const shallow${1} = (props = {}) => {
  const effectiveProps = { ...defaultProps, ...props };
  return {
    wrapper: shallow(<${1} {...effectiveProps} />),
    props: effectiveProps,
  };
};

describe('${1:FooComponent}', () => {
  let wrapper;
  let props;

  afterEach(() => {
    jest.resetAllMocks();
  });

  describe('rendering', () => {
    it('should render correctly with the testing defaultProps', () => {
      { wrapper } = shallow${1}();
      expect(wrapper).toMatchSnapshot();
    });

    it('should render correctly when {2}', () => {
      ({ wrapper, props } = shallow${1}({
        // ...${0}
      }));
      expect(wrapper.find('#id-1').exists()).toBe(true);
      expect(wrapper.find('#id-2').text()).toBe('Fugiat');
      expect(wrapper.find('#id-3').text()).toContain('minim');
      expect(wrapper.find(AnotherComponent).exists()).toBe(true);
      expect(
        wrapper
          .find(AnotherComponent)
          .dive()
          .contains('elit'),
      ).toBe(true);
      expect(
        wrapper.contains(
          <AnotherComponent
            prop1="prop1Value"
            prop2={}
          />,
        ),
      ).toBe(true);
    });
  });

  describe('interaction', () => {
    it('should render correctly when {2}', () => {
      ({ wrapper, props } = shallow${1}());
    });
    wrapper.find(AnotherComponent)
      .simulate('change', { target: { value: 'someValue' } });
    expect(props.someHandler).toHaveBeenCalledTimes(1);
  });
});
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>jsunit.react.Component.shallow</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.js, text.plain</scope>
</snippet>
