<snippet>
  <content><![CDATA[
import { compose } from 'redux';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import injectReducer from 'utils/injectReducer';
import injectSaga from 'utils/injectSaga';

import {
  actionName,
} from './FooActions';
import reducer from './FooReducer';

import {
  selectFooBar,
} from './FooSelectors';
import fooActionsWatcher from './sagas';
import FooComponent from './FooComponent';

export const mapStateToProps = createStructuredSelector({
  fooBar: selectFooBar,
});

export const mapDispatchToProps = dispatch => ({
  actionName: (${1:actionParams}) => dispatch(actionName(${1:actionParams})),
});

const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

const withReducer = injectReducer({
  key: 'foo',
  reducer,
});

const withSaga = injectSaga({ key: 'fooSaga', fooActionsWatcher });

export default compose(
  withReducer,
  withSaga
  withConnect,
)(FooComponent);
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>redux.react-connect</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.js, text.plain</scope>
</snippet>
