<snippet>
  <content><![CDATA[
/* 1. You may want to exclude the end-point from security framework */

/* 2. Filter: */
public class SimpleCorsFilter implements Filter
{
  private final Logger log = LoggerFactory.getLogger(SimpleCorsFilter.class);

  public SimpleCorsFilter()
  {
    log.info("SimpleCorsFilter init");
  }

  @Override
  public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException
  {
    HttpServletResponse response = (HttpServletResponse) res;

    response.setHeader("Access-Control-Allow-Origin", "*");
    response.setHeader("Access-Control-Allow-Credentials", "true");
    response.setHeader("Access-Control-Allow-Methods", "PUT, POST, GET, OPTIONS, DELETE");
    response.setHeader("Access-Control-Max-Age", "3600");
    response.setHeader("Access-Control-Allow-Headers",
        "Authorization, Content-Type, Accept, X-Requested-With, remember-me");

    chain.doFilter(req, res);
  }

  @Override
  public void init(FilterConfig filterConfig)
  {
  }

  @Override
  public void destroy()
  {
  }
}

/* 3. Config the filter in web.xml */
<filter>
  <filter-name>SimpleCrosFilter</filter-name>
  <filter-class>au.com.rds.sb.security.SimpleCorsFilter</filter-class>
</filter>

<filter-mapping>
  <filter-name>SimpleCrosFilter</filter-name>
  <url-pattern>/workflow/deploy</url-pattern>
</filter-mapping>
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>web.filter.cors-filter</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.xml, text.plain</scope>
</snippet>
