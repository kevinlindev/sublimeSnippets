<snippet>
  <content><![CDATA[
@Configuration
public class AutoJpaEntityConfig
{
  @Autowired(required = false)
  private List<EntityMappings> explicitMappedEntities;

  @Bean
  public MetadataSourcesContributor metadataSourcesContributor()
  {
    return new RuntimeMappedOrmSources(explicitMappedEntities);
  }
}

public class RuntimeMappedOrmSources implements MetadataSourcesContributor
{
  private static final Logger logger = LoggerFactory.getLogger(RuntimeMappedOrmSources.class);

  private final List<EntityMappings> mappings;

  public RuntimeMappedOrmSources(Collection<EntityMappings> mappings)
  {
    if (mappings == null)
    {
      this.mappings = Collections.emptyList();
    }
    else
    {
      this.mappings = new ArrayList<>(mappings);
    }
  }

  @Override
  public void contribute(MetadataSources metadataSources)
  {
    try
    {
      Marshaller m = getMarshaller();

      for (EntityMappings orm : mappings)
      {
        if (orm.getEntity().isEmpty())
        {
          continue;
        }

        m.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, getSchemaLocation(orm.getVersion()));

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        m.marshal(orm, baos);

        if (logger.isDebugEnabled())
        {
          logger.debug(baos.toString());
        }

        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        metadataSources.addInputStream(bais);
      }
    }
    catch (JAXBException e)
    {
      throw new RuntimeException(e);
    }
  }

  private Marshaller getMarshaller() throws JAXBException
  {
    JAXBContext jaxbContext = JAXBContext.newInstance(EntityMappings.class);
    return jaxbContext.createMarshaller();
  }

  private String getSchemaLocation(String version)
  {
    if ("2.1".equals(version))
    {
      return "http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd";
    }
    else if ("2.2".equals(version))
    {
      return "http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd";
    }
    else if ("2.0".equals(version))
    {
      return "http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_0.xsd";
    }
    else if ("1.0".equals(version))
    {
      return "http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_1_0.xsd";
    }
    else
    {
      return "http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd";
    }
  }
}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spring-boot.config.util.configurable-jpa-entities-support</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.plain</scope>
</snippet>
