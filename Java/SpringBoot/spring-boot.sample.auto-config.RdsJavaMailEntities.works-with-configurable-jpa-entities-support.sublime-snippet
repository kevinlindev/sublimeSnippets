<snippet>
  <content><![CDATA[
// Auto-configuration classes are regular Spring Configuration beans. They are located using the SpringFactoriesLoader mechanism (keyed against this class). Generally auto-configuration beans are @Conditional beans (most often using @ConditionalOnClass and @ConditionalOnMissingBean annotations)

@Configuration
@ConditionalOnExpression("${rdsc.auto-entity.enabled:false}")
@ConditionalOnClass(EntityMappings.class)
public class EmailEntitiesConfiguration
{
  private static final String NAME_MUST_BE_UNIQUE = "emailServicesEntities";

  @Value("${rdsc.auto-entity.email-services.schema:SERVICES}")
  private String emailsSchema;

  @Bean(name = NAME_MUST_BE_UNIQUE)
  @ConditionalOnExpression("${rdsc.auto-entity.email-services.enabled:true}")
  public EntityMappings emailServicesEntities()
  {
    SchemaMappingBuilder m = new SchemaMappingBuilder(emailsSchema);
    m.add(RdsEmail.class, "RDS_EMAIL");
    m.add(RdsEmailAttachment.class, "RDS_EMAIL_ATTACHMENT");
    m.add(RdsEmailRecipient.class, "RDS_EMAIL_RECIPIENT");

    return m.getMappings();
  }
}

public class SchemaMappingBuilder
{
  private final String schema;
  private final EntityMappings mappings;

  /**
   * @param schema the schema to apply to all entities
   */
  public SchemaMappingBuilder(String schema)
  {
    this.schema = schema;
    this.mappings = new EntityMappings();
  }

  protected String getTableName(Class<?> e, String defaultTable)
  {
    String tableName = null;
    javax.persistence.Table ta = e.getAnnotation(javax.persistence.Table.class);
    if (ta != null)
    {
      tableName = ta.name();
    }
    if (tableName == null || tableName.isEmpty())
    {
      tableName = defaultTable;
    }
    return tableName;
  }

  protected Class<?> getClass(String fullName) throws ClassNotFoundException
  {
    return Class.forName(fullName);
  }

  @Deprecated
  public Entity add(String fullEntityClass) throws ClassNotFoundException
  {
    return add(getClass(fullEntityClass));
  }

  @Deprecated
  public Entity add(String fullEntityClass, String defaultTable) throws ClassNotFoundException
  {
    return add(getClass(fullEntityClass), defaultTable);
  }

  /**
   * Defines the supplied class as an entity, using the table name annotated on the class.
   * If the class does not have a @Table annotation with a table name, this throws an
   *
   * @throws NullPointerException entityClass is null
   * @throws IllegalArgumentException if entityClass does not have a {@link Table} annotation with a table name
   * @param entityClass the class to define as an entity
   * @return the Entity definition
   */
  public Entity add(Class<?> entityClass)
  {
    requireNonNull(entityClass);
    String tableName = getTableName(entityClass, null);
    if (tableName == null)
    {
      throw new IllegalArgumentException("No Table defined on " + entityClass.getName());
    }

    return addExplicit(entityClass, tableName);
  }

  /**
   * Defines the supplied class as an entity, using the table name annotated on the class.
   * If the class does not have a @Table annotation with a table name, defaultTable is used instead
   *
   * @throws NullPointerException entityClass is null
   * @param entityClass the class to define as an entity
   * @return the Entity definition
   */
  public Entity add(Class<?> entityClass, String defaultTable)
  {
    requireNonNull(entityClass);
    String tableName = getTableName(entityClass, defaultTable);

    return addExplicit(entityClass, tableName);
  }

  protected Entity addExplicit(Class<?> entityClass, String tableName)
  {
    Table t = new Table();
    t.setSchema(schema);
    t.setName(tableName);

    Entity entity = new Entity(entityClass);
    entity.setTable(t);

    mappings.getEntity().add(entity);

    return entity;
  }

  public EntityMappings getMappings()
  {
    return mappings;
  }
}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spring-boot.sample.auto-config.RdsJavaMailEntities.works-with-configurable-jpa-entities-support</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.plain</scope>
</snippet>
