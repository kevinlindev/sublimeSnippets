<snippet>
  <content><![CDATA[
// Auto-configuration classes are regular Spring Configuration beans. They are located using the SpringFactoriesLoader mechanism (keyed against this class). Generally auto-configuration beans are @Conditional beans (most often using @ConditionalOnClass and @ConditionalOnMissingBean annotations)

package au.com.rds.email.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import au.com.rds.email.domain.RdsEmail;
import au.com.rds.email.domain.RdsEmailAttachment;
import au.com.rds.email.domain.RdsEmailRecipient;
import au.com.rds.entityconfigutils.mapping.EntityMappings;
import au.com.rds.entityconfigutils.util.SchemaMappingBuilder;

@Configuration
@ConditionalOnExpression("${rdsc.auto-entity.enabled:false}")
@ConditionalOnClass(EntityMappings.class)
public class EmailEntitiesConfiguration
{
  private static final String NAME_MUST_BE_UNIQUE = "emailServicesEntities";

  @Value("${rdsc.auto-entity.email-services.schema:SERVICES}")
  private String emailsSchema;

  @Bean(name = NAME_MUST_BE_UNIQUE)
  @ConditionalOnExpression("${rdsc.auto-entity.email-services.enabled:true}")
  public EntityMappings emailServicesEntities()
  {
    SchemaMappingBuilder m = new SchemaMappingBuilder(emailsSchema);
    m.add(RdsEmail.class, "RDS_EMAIL");
    m.add(RdsEmailAttachment.class, "RDS_EMAIL_ATTACHMENT");
    m.add(RdsEmailRecipient.class, "RDS_EMAIL_RECIPIENT");

    return m.getMappings();
  }
}


@Configuration
public class RdsAutoEntityConfig
{
  @Autowired(required = false)
  private List<EntityMappings> explicitMappedEntities;

  @Bean
  public MetadataSourcesContributor metadataSourcesContributor()
  {
    return new RuntimeMappedOrmSources(explicitMappedEntities);
  }
}


package au.com.rds.entityconfigutils.hibernate;

import au.com.rds.entityconfigutils.mapping.EntityMappings;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.spi.MetadataSourcesContributor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

public class RuntimeMappedOrmSources implements MetadataSourcesContributor
{
  private static final Logger logger = LoggerFactory.getLogger(RuntimeMappedOrmSources.class);

  private final List<EntityMappings> mappings;

  public RuntimeMappedOrmSources(Collection<EntityMappings> mappings)
  {
    if (mappings == null)
    {
      this.mappings = Collections.emptyList();
    }
    else
    {
      this.mappings = new ArrayList<>(mappings);
    }
  }

  @Override
  public void contribute(MetadataSources metadataSources)
  {
    try
    {
      Marshaller m = getMarshaller();

      for (EntityMappings orm : mappings)
      {
        if (orm.getEntity().isEmpty())
        {
          continue;
        }

        m.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, getSchemaLocation(orm.getVersion()));

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        m.marshal(orm, baos);

        if (logger.isDebugEnabled())
        {
          logger.debug(baos.toString());
        }

        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        metadataSources.addInputStream(bais);
      }
    }
    catch (JAXBException e)
    {
      throw new RuntimeException(e);
    }
  }

  private Marshaller getMarshaller() throws JAXBException
  {
    JAXBContext jaxbContext = JAXBContext.newInstance(EntityMappings.class);
    return jaxbContext.createMarshaller();
  }

  private String getSchemaLocation(String version)
  {
    if ("2.1".equals(version))
    {
      return "http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd";
    }
    else if ("2.2".equals(version))
    {
      return "http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd";
    }
    else if ("2.0".equals(version))
    {
      return "http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_0.xsd";
    }
    else if ("1.0".equals(version))
    {
      return "http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_1_0.xsd";
    }
    else
    {
      return "http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd";
    }
  }
}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spring-boot.sample.auto-config.RdsJavaMailEntities</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.plain</scope>
</snippet>
