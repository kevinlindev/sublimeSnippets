<snippet>
  <content><![CDATA[
The order that filters are defined in the chain is very important. Irrespective of which filters you are actually using, the order should be as follows:

• ChannelProcessingFilter - because it might need to redirect to a different protocol

• SecurityContextPersistenceFilter - so a SecurityContext can be set up in the SecurityContextHolder at the beginning of a web request, and any changes to the SecurityContext can be copied to the HttpSession when the web request ends (ready for use with the next web request)

• ConcurrentSessionFilter - because it uses the SecurityContextHolder functionality and needs to update the SessionRegistry to reflect ongoing requests from the principal

• Authentication processing mechanisms such as UsernamePasswordAuthenticationFilter, CasAuthenticationFilter, BasicAuthenticationFilter etc - so that the SecurityContextHolder can be modified to contain a valid Authentication request token

• The SecurityContextHolderAwareRequestFilter - if you are using it to install a Spring Security aware HttpServletRequestWrapper into your servlet container

• The JaasApiIntegrationFilter - if a JaasAuthenticationToken is in the SecurityContextHolder this will process the FilterChain as the Subject in the JaasAuthenticationToken

• RememberMeAuthenticationFilter - so that if no earlier authentication processing mechanism updated the SecurityContextHolder, and the request presents a cookie that enables remember-me services to take place, a suitable remembered Authentication object will be put there

• AnonymousAuthenticationFilter - so that if no earlier authentication processing mechanism updated the SecurityContextHolder, an anonymous Authentication object will be put there

• ExceptionTranslationFilter - to catch any Spring Security exceptions so that either an HTTP error response can be returned or an appropriate AuthenticationEntryPoint can be launched

• FilterSecurityInterceptor - to protect web URIs and raise exceptions when access is denied
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spring-security.filter-list-and-ordering</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.xml, text.plain</scope>
</snippet>
