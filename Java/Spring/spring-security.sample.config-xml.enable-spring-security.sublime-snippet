<snippet>
  <content><![CDATA[
// 1. Dependencies
<dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-web</artifactId>
</dependency>
<dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-config</artifactId>
</dependency>

// 2. web.xml
<?xml version="1.0" encoding="UTF-8"?>
<!--
The web.xml will do the following things:
• Registers the springSecurityFilterChain Filter for every URL in your application.
• Adds a ContextLoaderListener that loads the security-config-xml.
-->
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

  <!--
    - Location of the XML file that defines the root application context
    - Applied by ContextLoaderListener.
  -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      ${1:/WEB-INF/spring/}*.xml
    </param-value>
  </context-param>


  <filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--
    - Loads the root application context of this web app at startup.
    - The application context is then available via
    - WebApplicationContextUtils.getWebApplicationContext(servletContext).
  -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

</web-app>

// 3. ${1}/${2:security}.xml
<!--
The security-config-xml will:
• Require authentication to every URL in your application
• Generate a login form for you
• Allow the user with the Username "user" and the Password "password" to authenticate with form based authentication
• Allow the user to logout
• CSRF attack prevention
• Session Fixation protection
• Security Header integration
  - HTTP Strict Transport Security for secure requests
  - X-Content-Type-Options integration
  - Cache Control (can be overridden later by your application to allow caching of your static resources)
  - X-XSS-Protection integration
  - X-Frame-Options integration to help prevent Clickjacking
• Integrate with the following Servlet API methods
  - HttpServletRequest#getRemoteUser()
  - HttpServletRequest.html#getUserPrincipal()
  - HttpServletRequest.html#isUserInRole(java.lang.String)
  - HttpServletRequest.html#login(java.lang.String, java.lang.String)
  - HttpServletRequest.html#logout()
-->
<b:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:b="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

  <http />

  <user-service>
    <user name="user" password="password" authorities="ROLE_USER" />
  </user-service>

</b:beans>
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spring-security.sample.config-xml.enable-spring-security</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>text.xml, text.plain</scope>
</snippet>
