<snippet>
  <content><![CDATA[
public abstract class DQIRowCheckResultWriter
        implements ItemWriter<List<DQICheckResult>> {

    @Value("#{jobParameters['date']}")
    private String date;

    @Value("#{jobParameters['resultFilesClassifier']}")
    private String resultFilesClassifier;

    @Autowired
    private ResultRepository resultRepository;

    @BeforeStep
    public void beforeStep(StepExecution stepExecution) {
        resultRepository.deleteByRelativePathIfExists(
                getExceptionDetailsRelativePath(),
                getSummaryRelativePath()
        );
    }

    @Override
    public void write(List<? extends List<DQICheckResult>> items) {
        List<DQICheckResult> exceptions = items.stream()
                .flatMap(List::stream)
                .filter(item -> !item.pass())
                .collect(Collectors.toList());

        resultRepository.createOrAppendExceptionDetails(
                getExceptionDetailsRelativePath(),
                exceptions
        );
    }

    @AfterStep
    public ExitStatus afterStep(StepExecution stepExecution) {
        ExecutionContext executionContext = stepExecution.getExecutionContext();
        @SuppressWarnings("unchecked")
        Map<String, DQISummary> summaryMap = (Map<String, DQISummary>)
                executionContext.get(CONTEXT_KEY_DQI_CHECK_SUMMARY);

        List<DQISummary> summaryList = new ArrayList<>(summaryMap.values());
        summaryList.sort(Comparator
                .comparing(DQISummary::getPortfolio)
                .thenComparing(DQISummary::getRuleId)
        );

        resultRepository.writeSummary(
                getSummaryRelativePath(),
                DQISummary.getEdgDetailHeaders(),
                summaryList
        );
        summaryMap.clear();
        return null;
    }

    protected String getDate() {
        return date;
    }

    protected String getResultFilesClassifier() {
        return resultFilesClassifier;
    }

    protected abstract String getSourceName();

    protected abstract Path getReportFileRelativePath(String reportSuffix);

    private Path getSummaryRelativePath() {
        return getReportFileRelativePath(
                getVersionedCsvFileName("details"));
    }

    private Path getExceptionDetailsRelativePath() {
        return getReportFileRelativePath(
                getVersionedCsvFileName("exceptions"));
    }
}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spring-batch.step.chunk.item-writer.sample</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.plain</scope>
</snippet>
