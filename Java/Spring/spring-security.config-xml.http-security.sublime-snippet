<snippet>
  <content><![CDATA[
<!--
  <http>:
  • is the parent for all web-related namespace functionality.
  • is responsible for creating a FilterChainProxy and the filter beans which it uses. Common problems like incorrect filter ordering are no longer an issue as the filter positions are predefined.
  • Use multiple http elements to define separate security filter chain configurations for different request patterns. (since 3.1)
    - If the pattern attribute is omitted from an http element, it matches all requests.
    - Creating an unsecured pattern is a simple example of this syntax
      <http pattern="/css/**" security="none"/>
      <http pattern="/login.jsp*" security="none"/>
      -- The pattern is mapped to an empty filter chain.
      -- These unsecured requests will be completely oblivious to any Spring Security web-related configuration or additional attributes such as requires-channel, so you will not be able to access information on the current user or call secured methods during the request. Use access='IS_AUTHENTICATED_ANONYMOUSLY' as an alternative if you still want the security filter chain to be applied.
-->
<http>
  <!--
    <intercept-url>:
    • pattern - ant path style syntax or regular-expression
    • access - defines the access requirements. To use Spring EL expressions (e.g. hasRole('USER') and hasIpAddress('192.168.1.0/24')), set use-expressions="true" in the <http> element
    • method - GET, POST, etc.

    * Put the most specific matches at the top
  -->
  <intercept-url pattern="/login.jsp*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
  <intercept-url pattern="/**" access="hasRole('USER')|ROLE_USER" />

  <!--
    • login-page - if not specified, spring will generate one using
      - the features that are enabled
      - standard values for logging in process URL, success redirect URL, etc.
    • default-target-url / authentication-success-handler-ref
    • always-use-default-target
  -->
  <form-login login-page="/login.jsp"/>

  <!--
    • logout-url - default to "logout"
  -->
  <logout />
</http>
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spring-security.config-xml.http-security</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>text.xml, text.plain</scope>
</snippet>
