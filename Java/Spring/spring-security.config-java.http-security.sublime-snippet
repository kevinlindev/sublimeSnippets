<snippet>
  <content><![CDATA[
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    http
      // by default uses a Bean by the name of corsConfigurationSource. If Spring MVC is on classpath and no CorsConfigurationSource is provided, Spring Security will use CORS configuration provided to Spring MVC
      .cors()
        .and()
      .authorizeRequests()
        // Specified multiple URL patterns that any user can access
        .antMatchers("/resources/**", "/signup", "/about").permitAll()
        // No need to specify the "ROLE_" prefix since we are invoking the hasRole method
        .antMatchers("/admin/**").hasRole("ADMIN")
        .antMatchers("/db/**").access("hasRole('ADMIN') and hasRole('DBA')")
        // Any URL that has not already been matched on only requires that the user be authenticated
        .anyRequest().authenticated()
        .and()
      // ...
      .formLogin()
      // ...
      .logout()
        .logoutUrl("/my/logout")
        .logoutSuccessUrl("/my/index")
        .logoutSuccessHandler(logoutSuccessHandler)
        // -- LogoutSuccessHandlers --
        // SimpleUrlLogoutSuccessHandler - use .logoutSuccessUrl as a shortcut for this
        // HttpStatusReturningLogoutSuccessHandler
        .invalidateHttpSession(true)
        .addLogoutHandler(logoutHandler)
        // -- LogoutHandlers --
        // PersistentTokenBasedRememberMeServices
        // TokenBasedRememberMeServices
        // CookieClearingLogoutHandler - use .deleteCookies() as a shortcut for this
        // CsrfLogoutHandler
        // SecurityContextLogoutHandler
        .deleteCookies(cookieNamesToClear)
        .and()
      // ...
  }

  @Bean
  CorsConfigurationSource corsConfigurationSource() {
    CorsConfiguration configuration = new CorsConfiguration();
    configuration.setAllowedOrigins(Arrays.asList("https://example.com"));
    configuration.setAllowedMethods(Arrays.asList("GET","POST"));
    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration("/**", configuration);
    return source;
  }
}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spring-security.config-java.http-security</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.plain</scope>
</snippet>
