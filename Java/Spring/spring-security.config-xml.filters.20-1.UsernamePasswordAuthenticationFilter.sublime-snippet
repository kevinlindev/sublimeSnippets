<snippet>
  <content><![CDATA[
<!--
  Three stages required to configure a user-password login form:
  1. Configure a LoginUrlAuthenticationEntryPoint with the URL of the login page in the ExceptionTranslationFilter, and implement the login page (using a JSP or MVC controller).
  2. Configure an instance of UsernamePasswordAuthenticationFilter in the application context
  3. Add the filter bean to your filter chain proxy (making sure you pay attention to the order).

  If authentication is successful, the resulting Authentication object will be placed into the SecurityContextHolder. The configured AuthenticationSuccessHandler (strategy interface) will then be called to either redirect or forward the user to the appropriate destination.
  • SimpleUrlAuthenticationSuccessHandler
  • SavedRequestAwareAuthenticationSuccessHandler (by default)

  If authentication fails, the configured AuthenticationFailureHandler (strategy interface) will be invoked.
  • SimpleUrlAuthenticationFailureHandler
  • ExceptionMappingAuthenticationFailureHandler
  • DelegatingAuthenticationFailureHandler
-->
<bean id="authenticationFilter" class=
"org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
  <property name="authenticationManager" ref="authenticationManager"/>
</bean>
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spring-security.config-xml.filters.20-1.UsernamePasswordAuthenticationFilter</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>text.xml, text.plain</scope>
</snippet>
