<snippet>
  <content><![CDATA[
// Add @EnableScheduling to one of your @Configuration classes to enable @Scheduled
// Need to use class-based proxy by CGLIB (instead of interface-based JDK dynamic proxy) to support protected/package level methods
// @Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)
@Service
public class ServiceImpl implements Service {

  //...

  @Qualifier("txManager")
  private PlatformTransactionManager txManager;

  //...

  @Scheduled(cron="0 * * * * ?")
  public void theTask()
  {
    // To address the common bypassing proxy issue, consider refactoring the code to another implementation class and call it through its interface (thus it can be proxied)
    final TransactionTemplate txTemplate = new TransactionTemplate(txManager);
    txTemplate.execute(new TransactionCallbackWithoutResult() {
      @Override
      protected void doInTransactionWithoutResult(TransactionStatus status)
      {
        this.update(xxx);
      }
    });
  }
}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spring-task.sample.@Scheduled-tx</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.plain</scope>
</snippet>
