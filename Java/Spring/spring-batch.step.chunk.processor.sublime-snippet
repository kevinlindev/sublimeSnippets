<snippet>
  <content><![CDATA[
public abstract class DQIRowChecker<V, C>
        implements ItemProcessor<Map<String, Object>, List<DQICheckResult>> {

    private final List<Check<?, ?>> checkList;

    private RulesMetaDataHelper rulesMetaDataHelper;

    protected DQIRowChecker(List<Check<?, ?>> checkList) {
        this.checkList = Collections.unmodifiableList(checkList);
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<DQICheckResult> process(Map<String, Object> item) {
        V valueForTest = getValue(item);
        C contextValue = getContextValue(item);

        List<DQICheckResult> dqiCheckResultList = new ArrayList<>();
        for (Check<?, ?> check : checkList) {
            List<String> failMessages = new ArrayList<>();

            boolean passed = ((Check<Object, Object>) check).apply(
                    valueForTest,
                    contextValue,
                    failMessages);

            Rule<?> rule = check.getRule();
            String uniqueRowIdentifier = getUniqueRowIdentifier(item);

            RuleMetaData ruleMetaData =
                    rulesMetaDataHelper.getRuleMetaData(rule.getId());

            DQICheckResult rowCheckResult =
                    new DQICheckResult(ruleMetaData, uniqueRowIdentifier);
            rowCheckResult.setPortfolio(getPortfolio(item));
            rowCheckResult.setFileName(getSourceName());
            rowCheckResult.setFieldName(getFieldName());

            String failMessage = String.join("\n", failMessages);
            rowCheckResult.setFailsMessage(failMessage);

            dqiCheckResultList.add(rowCheckResult);
            if (!passed) {
                rowCheckResult.setFieldValue(((Check<Object, Object>) check)
                        .getFormattedValueTested(valueForTest));
                break;
            }
        }

        return dqiCheckResultList;
    }

    protected abstract String getSourceName();

    protected abstract String getFieldName();

    protected abstract String getUniqueRowIdentifier(Map<String, Object> item);

    protected abstract V getValue(Map<String, Object> item);

    protected abstract C getContextValue(Map<String, Object> item);

    protected abstract String getPortfolio(Map<String, Object> item);

    @Autowired
    public void setRulesMetaDataHelper(RulesMetaDataHelper rulesMetaDataHelper) {
        this.rulesMetaDataHelper = rulesMetaDataHelper;
    }

}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spring-batch.step.chunk.processor</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.plain</scope>
</snippet>
