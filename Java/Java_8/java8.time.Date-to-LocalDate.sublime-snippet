<snippet>
  <content><![CDATA[
LocalDate ${1:localDate} = ${2:date}.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

// Keep in mind that a java.util.Date is a misnomer as it represents a date plus a time-of-day, in UTC.
// In contrast, the LocalDate class represents a date-only value without time-of-day and without time zone.

// 1. Going from java.util.Date to java.time means converting to the equivalent class of java.time.Instant. The Instant class represents a MOMENT on the timeline in UTC with a resolution of nanoseconds (up to nine (9) digits of a decimal fraction).
Instant instant = ${2:date}.toInstant();

// 2. A time zone is crucial in determining a date. For any given moment, the date varies around the globe by zone. So we need to move that Instant into a time zone. We apply ZoneId to get a ZonedDateTime.
ZoneId z = ZoneId.of( "America/Montreal" );
ZonedDateTime zdt = instant.atZone( z );

// 3. From there, ask for a date-only local date:
LocalDate ${1:localDate} = zdt.toLocalDate();
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>java8.time.Date-to-LocalDate</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.plain</scope>
</snippet>
