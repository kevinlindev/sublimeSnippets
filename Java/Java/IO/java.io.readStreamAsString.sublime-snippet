<snippet>
  <content><![CDATA[
/* Using Apache Commons IOUtils */
public static String readStreamAsString(InputStream is) throws IOException
{
  String result;
  try
  {
    result = IOUtils.toString(is, StandardCharsets.UTF_8);
    return result;
  }
  catch (IOException e)
  {
    throw e;
  }
  finally
  {
    IOUtils.closeQuietly(is);
  }
}


/* Using JDK Scanner */
Scanner s = new Scanner(inputStream).useDelimiter("\\\\A");
String result = s.hasNext() ? s.next() : "";


/* Using Java8 Stream API. Warning: This solution convert different line breaks (like \\r\\n) to \\n. */
String result = new BufferedReader(new InputStreamReader(inputStream))
  .lines().collect(Collectors.joining("\\n"));


/* Using Java8 parallel Stream API. Warning: This solution convert different line breaks (like \\r\\n) to \\n. */
String result = new BufferedReader(new InputStreamReader(inputStream)).lines()
   .parallel().collect(Collectors.joining("\\n"));


/* Using InputStreamReader and StringBuilder (JDK) */
final int bufferSize = 1024;
final char[] buffer = new char[bufferSize];
final StringBuilder out = new StringBuilder();
Reader in = new InputStreamReader(inputStream, "UTF-8");
for (; ; ) {
    int rsz = in.read(buffer, 0, buffer.length);
    if (rsz < 0)
        break;
    out.append(buffer, 0, rsz);
}
return out.toString();


/* Using ByteArrayOutputStream and inputStream.read (JDK) */
ByteArrayOutputStream result = new ByteArrayOutputStream();
byte[] buffer = new byte[1024];
int length;
while ((length = inputStream.read(buffer)) != -1) {
    result.write(buffer, 0, length);
}
// StandardCharsets.UTF_8.name() > JDK 7
return result.toString("UTF-8");

/* Using BufferedReader (JDK). Warning: This solution convert different line breaks (like \\n\\r) to line.separator system property (for example, in Windows to "\\r\\n"). */
String newLine = System.getProperty("line.separator");
BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
StringBuilder result = new StringBuilder();
String line; boolean flag = false;
while ((line = reader.readLine()) != null) {
    result.append(flag? newLine: "").append(line);
    flag = true;
}
return result.toString();


/* Using BufferedInputStream and ByteArrayOutputStream (JDK) */
BufferedInputStream bis = new BufferedInputStream(inputStream);
ByteArrayOutputStream buf = new ByteArrayOutputStream();
int result = bis.read();
while(result != -1) {
    buf.write((byte) result);
    result = bis.read();
}
// StandardCharsets.UTF_8.name() > JDK 7
return buf.toString("UTF-8");


/* Using inputStream.read() and StringBuilder (JDK). Warning: This solution has problem with Unicode, for example with Russian text (work correctly only with non-Unicode text) */
int ch;
StringBuilder sb = new StringBuilder();
while((ch = inputStream.read()) != -1)
    sb.append((char)ch);
reset();
return sb.toString();
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>java.io.readStreamAsString</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.plain</scope>
</snippet>
