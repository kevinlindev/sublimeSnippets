<snippet>
  <content><![CDATA[
package concurrency.basic;

import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.LockSupport;

/**
 * <ul>
 * <li>{@link #acquire()}, {@link #acquireShared()} -【由AQS实现】争用资源逻辑：
 *   <ul>
 *     <li>将返回值作为条件，循环调用对应的尝试争用方法({@link #tryAcquire()}或{@link #tryAcquireShared()})</li>
 *     <li>如果争用资源成功，则当前线程则退出等待队列（如果已入列）</li>
 *     <li>如果争用资源失败，则当前线程进入等待队列并阻塞，被唤醒后开始下一次争用循环</li>
 *   </ul>
 * </li>
 * <li>{@link #release()}, {@link #releaseShared()} -【由AQS实现】释放资源逻辑：
 *   <ul>
 *     <li>调用对应的尝试释放方法({@link #tryRelease()}或{@link #tryReleaseShared()})</li>
 *     <li>如果释放资源成功，则唤醒所有等待队列中的线程</li>
 *     <li>如果释放资源失败，则返回</li>
 *   </ul>
 * </li>
 * <li>{@link #tryAcquire()}, {@link #tryAcquireShared()} -【由用户实现】争用资源的具体操作</li>
 * <li>{@link #tryRelease()}, {@link #tryReleaseShared()} -【由用户实现】释放资源的具体操作</li>
 * </ul>
 */
public abstract class Aqs {

  protected final AtomicReference<Thread> owner;
  protected final AtomicInteger state;

  private volatile LinkedBlockingDeque<Thread> waiters = new LinkedBlockingDeque<>();

  protected Aqs(int initState) {
    this.owner = new AtomicReference<>();
    this.state = new AtomicInteger(initState);
  }

  protected Aqs() {
    this(0);
  }

  protected boolean tryAcquire() {
    throw new UnsupportedOperationException();
  }

  public void acquire() {
    boolean enqueued = false;
    while (!tryAcquire()) {
      if (!enqueued) {
        waiters.offer(Thread.currentThread());
        enqueued = true;
      }
      LockSupport.park();
    }
    waiters.remove(Thread.currentThread());
  }

  protected boolean tryRelease() {
    throw new UnsupportedOperationException();
  }

  public void release() {
    if (tryRelease()) {
      unparkAll();
    }
  }

  protected int tryAcquireShared() {
    throw new UnsupportedOperationException();
  }

  public void acquireShared() {
    boolean enqueued = false;
    while (tryAcquireShared() < 0) {
      if (!enqueued) {
        waiters.offer(Thread.currentThread());
        enqueued = true;
      }
      LockSupport.park();
    }
    waiters.remove(Thread.currentThread());
  }

  protected boolean tryReleaseShared() {
    throw new UnsupportedOperationException();
  }

  public void releaseShared() {
    if (tryReleaseShared()) {
      unparkAll();
    }
  }

  private void unparkAll() {
    for (Thread t : waiters) {
      LockSupport.unpark(t);
    }
  }
}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>java.concurrency.basic.aqs</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java, text.plain</scope>
</snippet>
